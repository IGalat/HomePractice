based on https://www.youtube.com/watch?v=msXL2oDexqw&index=1&list=PLqq-6Pq4lTTbx8p2oCgcAQGQyqN8XeA1x
and http://www.springboottutorial.com/hibernate-jpa-tutorial-with-spring-boot-starter-jpa

We've got a blog with articles and comments to articles. This is a CRUD REST with cascade deleting of corresponding comments

Special filenames(recognized by spring/boot): data.sql(executed at start), logback-spring.xml, banner.txt

data.sql is redundant in this project, as I populate DB via InitActions class

cascade deleting via annotations in Comment class;

interface ArticleStats in Article(and in repo) allows to get only certain fields;

when serializing to json, comment will show articleId - also via annotations in Comment
(if we want to show more than id, gotta make Projection(like with ArticleStats))

For transactions:
 - in Launch class @EnableTransactionManagement
 - in Service or wherever @Transactional over class(for all methods) or over method
   (if over both, the config on the method one override config of class: readOnly, and other @ options)

Db is persisted through application.properties


Tests:
 Controllers: We might want to test rest controllers for correct json in/output.
  For mocks: can initialize spring context, which takes time for every class (ArticleControllerContextTest), or just mock (ArticleControllerTest)
  For non-mocks(integration): not implemented
 Service: Easily mocked repo, no spring context needed
 Repo: use integration tests for these, not unit tests. Or don't test them, no code here.
 Client-side: not implemented here, google TestRestTemplate

Logs:
 LoggingAspect class allows to log en masse, all methods in/out. Configurable, as any AOP
 Spring boot uses logback, config here is through logback-spring.xml , only thing in application properties is hibernate.format_sql if we want that
 But we can also write log levels in application.properties, and use .xml only a bit https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html
 Custom banner is banner.txt, to logs through application.properties  spring.main.banner-mode=log